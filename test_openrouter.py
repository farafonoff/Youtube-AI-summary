#!/usr/bin/env python3
"""
Test script for OpenRouter summarization service
"""

from openrouter_summarization_service import OpenRouterSummarizationService

def test_openrouter():
    """Test the OpenRouter service"""
    print("üß™ Testing OpenRouter summarization service...")
    
    try:
        service = OpenRouterSummarizationService()
        service_info = service.get_service_info()
        
        print(f"üìä Service Info:")
        for key, value in service_info.items():
            print(f"   {key}: {value}")
        
        if not service.is_initialized:
            print("‚ö†Ô∏è  OpenRouter API key not configured")
            print("   Add your API key to OPENROUTER_API_KEY in .env file")
            print("   Get free API key at: https://openrouter.ai/")
            return False
        
        # Test with Russian text
        test_text = """
–í 2023 –≥–æ–¥—É –º–∏—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ —Å—Ç–æ–ª–∫–Ω—É–ª–∞—Å—å —Å —Ä—è–¥–æ–º –≤—ã–∑–æ–≤–æ–≤, –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—é, –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–∞–Ω–¥–µ–º–∏–∏. –°—Ç—Ä–∞–Ω—ã –ø–æ-—Ä–∞–∑–Ω–æ–º—É —Å–ø—Ä–∞–≤–ª—è–ª–∏—Å—å —Å —ç—Ç–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏, –ø—Ä–∏–Ω–∏–º–∞—è –º–µ—Ä—ã –ø–æ —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–æ—Å—Ç–∞.
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–∏ –º–Ω–æ–≥–∏—Ö —Å—Ç—Ä–∞–Ω –ø–æ–≤—ã—à–∞–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –±–æ—Ä—å–±—ã —Å –∏–Ω—Ñ–ª—è—Ü–∏–µ–π, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ –∑–∞–º–µ–¥–ª–µ–Ω–∏—é
—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–æ—Å—Ç–∞. –í —Ç–æ –∂–µ –≤—Ä–µ–º—è, —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ—Å—è —Å—Ç—Ä–∞–Ω—ã —Å—Ç–∞–ª–∫–∏–≤–∞–ª–∏—Å—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏,
—Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –æ—Ç—Ç–æ–∫–æ–º –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –¥–æ–ª–ª–∞—Ä–∞ –°–®–ê.
        """
        
        print(f"üìù Testing with text ({len(test_text.strip())} characters)...")
        summary = service.summarize_text(test_text.strip())
        
        print(f"‚úÖ Summarization completed!")
        print(f"üìÑ Summary length: {len(summary)} characters")
        print(f"üéØ Summary:\n{summary}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå OpenRouter test failed: {e}")
        return False

def test_with_long_text():
    """Test with longer text (existing transcription)"""
    print("\nüß™ Testing with long transcription...")
    
    try:
        import os
        txt_file = './transcriptions/audio_dVhYaEXir88.txt'
        
        if not os.path.exists(txt_file):
            print("‚ö†Ô∏è  Long text file not found, skipping long text test")
            return True
        
        with open(txt_file, 'r', encoding='utf-8') as f:
            long_text = f.read().strip()
        
        service = OpenRouterSummarizationService()
        if not service.is_initialized:
            print("‚ö†Ô∏è  OpenRouter not configured, skipping long text test")
            return True
        
        print(f"üìù Testing with long text ({len(long_text)} characters)...")
        summary = service.summarize_text(long_text)
        
        print(f"‚úÖ Long text summarization completed!")
        print(f"üìÑ Summary length: {len(summary)} characters")
        print(f"üéØ Summary preview: {summary[:200]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Long text test failed: {e}")
        return False

if __name__ == '__main__':
    print("üöÄ OpenRouter Summarization Service Tests\n")
    
    success1 = test_openrouter()
    success2 = test_with_long_text()
    
    if success1 and success2:
        print("\nüéâ All OpenRouter tests passed!")
    else:
        print("\n‚ö†Ô∏è  Some tests failed or were skipped")
